// Fun√ß√£o para registrar o service worker
navigator.serviceWorker.register('service-worker.js')
  .then(registration => {
    console.log('Service Worker registrado com sucesso:', registration);
  })
  .catch(error => {
    console.error('Falha ao registrar o Service Worker:', error);
  });

alert("üéâ Ol√°, pequeno explorador! Bem-vindo ao Circuito Adequo de Equoterapia Interativo! üê¥ü•ï\n\n" +
    "Aqui est√£o as instru√ß√µes para voc√™ come√ßar a brincadeira:\n\n" +
    "1. O seu cavalo est√° faminto e precisa comer muitas cenouras! üê¥üçΩÔ∏è\n" +
    "2. Voc√™ precisa guiar o cavalo pelo mapa e ir at√© as 'cenouras' (s√£o os √≠cones de cenoura no mapa) ü•ï\n" +
    "3. Para fazer o cavalo comer, basta chegar bem pertinho da cenoura, a menos de 8 metros! üö∂‚Äç‚ôÇÔ∏èüê¥\n" +
    "4. A cada cenoura que o cavalo comer, ele ficar√° mais feliz e a contagem de 'cenouras restantes' vai diminuir! üéâ\n" +
    "5. Seu objetivo √© fazer o cavalo comer todas as cenouras e se divertir muito na aventura! üåü\n\n" +
    "Vamos l√°, cavaleiro! Prepare-se para guiar seu cavalo e fazer ele comer todas as cenouras! üèá\n" +
    "Est√° pronto para come√ßar a brincadeira? Vamos l√°! üéÆ");
// Cria o bot√£o
const startButton = document.createElement("button");
startButton.textContent = "Come√ßar!";
startButton.style.position = "absolute";
startButton.style.top = "50%";
startButton.style.left = "50%";
startButton.style.transform = "translate(-50%, -50%)";
startButton.style.padding = "10px 20px";
startButton.style.fontSize = "16px";
startButton.style.cursor = "pointer";
startButton.style.backgroundColor = "lightblue";
startButton.style.borderRadius = "15px";
startButton.style.zIndex = 1000; // Garante que o bot√£o apare√ßa acima de outros elementos

// Adiciona o bot√£o ao corpo da p√°gina
document.body.appendChild(startButton);

// Fun√ß√£o para iniciar os √°udios e remover o bot√£o
function iniciarJogo() {
    alert("üéâ Ol√°, pequeno explorador! Bem-vindo ao jogo do Cavalo e as Cenouras! üê¥ü•ï\n\n" +
          "Aqui est√£o as instru√ß√µes para voc√™ come√ßar a brincadeira:\n\n" +
          "1. O seu cavalo est√° faminto e precisa comer muitas cenouras! üê¥üçΩÔ∏è\n" +
          "2. Voc√™ precisa guiar o cavalo pelo mapa e ir at√© as 'cenouras' (s√£o os √≠cones de cenoura no mapa) ü•ï\n" +
          "3. Para fazer o cavalo comer, basta chegar bem pertinho da cenoura, a menos de 8 metros! üö∂‚Äç‚ôÇÔ∏èüê¥\n" +
          "4. A cada cenoura que o cavalo comer, ele ficar√° mais feliz e a contagem de 'cenouras restantes' vai diminuir! üéâ\n" +
          "5. Seu objetivo √© fazer o cavalo comer todas as cenouras e se divertir muito na aventura! üåü\n\n" +
          "Vamos l√°, cavaleiro! Prepare-se para guiar seu cavalo e fazer ele comer todas as cenouras! üèá\n" +
          "Est√° pronto para come√ßar a brincadeira? Vamos l√°! üéÆ");

    somPassos.play(); // Toca o som para desbloquear o √°udio
    document.body.removeChild(startButton); // Remove o bot√£o ap√≥s o clique
    getUserGPS(); // Chama a fun√ß√£o para come√ßar a obter o GPS
}

// Adiciona um evento de clique ao bot√£o
startButton.addEventListener("click", iniciarJogo);

// Vari√°vel para controlar se o zoom inicial foi aplicado
let zoomInicialAplicado = false;

// Inicializa o mapa sem centraliz√°-lo inicialmente
const map = L.map('map');

// URL da imagem PNG
const imageUrl = 'area.jpg'; // Substitua pelo caminho correto da sua imagem PNG

// Define os limites da imagem usando suas coordenadas
const southWest = L.latLng(-26.9794210561550436, -48.7531625172409093);
const northEast = L.latLng(-26.9763356004990413, -48.7497037682969037);

// Adiciona a imagem como uma sobreposi√ß√£o no mapa
L.imageOverlay(imageUrl, [southWest, northEast]).addTo(map);

// Ajusta a vista do mapa para incluir a imagem
map.fitBounds([southWest, northEast]);

// Adiciona o tile layer do OpenStreetMap com zoom m√≠nimo e m√°ximo
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    minZoom: 10,
    maxZoom: 21
}).addTo(map);

// Define os √≠cones de cavalo para cada dire√ß√£o
const userIcons = {
    up: L.icon({ iconUrl: 'cavalo.png', iconSize: [200, 100], iconAnchor: [100, 0] }),
    down: L.icon({ iconUrl: 'cavalo.png', iconSize: [200, 100], iconAnchor: [100, 0] }),
    left: L.icon({ iconUrl: 'cavalo.png', iconSize: [200, 100], iconAnchor: [100, 0] }),
    right: L.icon({ iconUrl: 'cavalo.png', iconSize: [200, 100], iconAnchor: [100, 0] })
};

// Vari√°vel para armazenar o marcador do usu√°rio
let userMarker;

// Array para armazenar os waypoints
let waypoints = [];

// Som de passos
const somPassos = new Audio('horse.mp3');
let tocandoPassos = false;

// Som de waypoint
const somWaypoint = new Audio('cenoura.mp3');

// Som de parab√©ns
const somParabens = new Audio('corneta.mp3');

// Vari√°veis para armazenar dist√¢ncia e n√∫mero de passos
let totalDistance = 0;
const stepLength = 2.8; // Comprimento m√©dio de um passo em metros
let stepCount = 0;
let lastPosition = null;

// Fun√ß√£o para tocar o som de passos
function tocarSomPassos() {
    if (!tocandoPassos) {
        tocandoPassos = true;
        somPassos.play();
        somPassos.onended = function() { tocandoPassos = false; };
    }
}

// Fun√ß√£o para parar o som de passos
function pararSomPassos() {
    if (!somPassos.paused) {
        somPassos.pause();
        somPassos.currentTime = 0;
        tocandoPassos = false;
    }
}

// Fun√ß√£o para tocar o som do waypoint
function tocarSomWaypoint() {
    pararSomPassos();
    somWaypoint.play();
    somWaypoint.onended = function() { tocarSomPassos(); };
}

// Fun√ß√£o para tocar o som de parab√©ns
function tocarSomParabens() {
    somParabens.play();
}

// Fun√ß√£o para atualizar a posi√ß√£o do usu√°rio e mudar o √≠cone
function updateUserPosition(lat, lng, direction) {
    if (userMarker) {
        // Calcula a dist√¢ncia percorrida desde a √∫ltima posi√ß√£o
        const previousPosition = L.latLng(lastPosition.lat, lastPosition.lng);
        const currentPosition = L.latLng(lat, lng);
        const distance = previousPosition.distanceTo(currentPosition); // Dist√¢ncia em metros
        totalDistance += distance; // Soma √† dist√¢ncia total
        stepCount = Math.floor(totalDistance / stepLength); // Calcula o n√∫mero de passos

        // Atualiza o marcador
        userMarker.setLatLng([lat, lng]);
        userMarker.setIcon(userIcons[direction]);
    } else {
        // Cria o marcador se ele n√£o existir
        userMarker = L.marker([lat, lng], { icon: userIcons[direction] }).addTo(map);
    }

    // Aplica o zoom apenas na primeira vez
    if (!zoomInicialAplicado) {
        map.setView([lat, lng], 18);
        zoomInicialAplicado = true;
    }

    // Atualiza o popup com a dist√¢ncia percorrida, passos e waypoints restantes
    userMarker.bindPopup(`Cenouras Restantes: ${waypoints.length}<br>Dist√¢ncia Percorrida: ${totalDistance.toFixed(2)} m<br>Passos: ${stepCount}`).openPopup();

    // Atualiza a √∫ltima posi√ß√£o para a pr√≥xima compara√ß√£o
    lastPosition = { lat, lng };

    // Fun√ß√£o para coletar waypoints
    collectWaypoints(lat, lng);
}

// Fun√ß√£o para adicionar waypoints fixos ao mapa
function addFixedWaypoints() {
    const fixedWaypoints = [
        { lat: -26.97799054, lng: -48.75139948},
        { lat: -26.97773616, lng: -48.75139492 },
        { lat: -26.97769345, lng: -48.75194658},
        { lat: -26.97699894, lng: -48.75219567 },
        { lat: -26.97686129, lng: -48.75112458 }
    ];

    const waypointIcon = L.icon({ iconUrl: 'cenoura.png', iconSize: [35, 35], iconAnchor: [17, 17] });

    fixedWaypoints.forEach(waypoint => {
        const marker = L.marker([waypoint.lat, waypoint.lng], { icon: waypointIcon }).addTo(map);
        waypoint.marker = marker;
        waypoints.push(waypoint);
    });

    updateRemainingWaypoints(); // Atualiza o contador de waypoints restantes
}

// Chame `addFixedWaypoints` para adicionar waypoints fixos
addFixedWaypoints();

// Vari√°vel global ou dentro do escopo apropriado
let waypointCaptured = false;

// Fun√ß√£o para coletar waypoints pr√≥ximos e narrar
function collectWaypoints(userLat, userLng) {
    waypointCaptured = false; // Reinicia para cada execu√ß√£o da fun√ß√£o

    // Filtra os waypoints para verificar se est√£o pr√≥ximos do usu√°rio
    waypoints = waypoints.filter(waypoint => {
        const waypointPosition = L.latLng(waypoint.lat, waypoint.lng);
        const userPosition = L.latLng(userLat, userLng);

        const distance = userPosition.distanceTo(waypointPosition); // Dist√¢ncia em metros

        if (distance < 6) {  // Se a dist√¢ncia for menor que 16 metros, o waypoint √© capturado
            waypoint.marker.remove(); // Remove o marcador do waypoint
            tocarSomWaypoint(); // Toca o som de captura do waypoint
            waypointCaptured = true;  // Marca que um waypoint foi capturado
            return false; // Retorna false para remover o waypoint da lista
        }
        return true; // Retorna true para manter o waypoint na lista
    });

    // Se algum waypoint foi capturado, atualize o contador
    if (waypointCaptured) {
        updateRemainingWaypoints();
    }
}

// Fun√ß√£o para verificar e narrar a quantidade de waypoints restantes
function updateRemainingWaypoints() {
    const remaining = waypoints.length;
    if (remaining > 0) {
        alert(`Restam ${remaining} cenouras para coletar!`);
    } else {
        alert('Voc√™ coletou todas as cenouras!');
    }
}

// Fun√ß√£o para obter a localiza√ß√£o do usu√°rio
function getUserGPS() {
    if (navigator.geolocation) {
        navigator.geolocation.watchPosition(position => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            const direction = getDirection(lat, lng); // Fun√ß√£o para determinar a dire√ß√£o
            updateUserPosition(lat, lng, direction);
        }, error => {
            console.error('Erro ao obter localiza√ß√£o:', error);
        }, {
            enableHighAccuracy: true
        });
    } else {
        console.error('Geolocaliza√ß√£o n√£o √© suportada neste navegador.');
    }
}

// Fun√ß√£o fict√≠cia para determinar a dire√ß√£o com base na latitude e longitude
function getDirection(lat, lng) {
    // L√≥gica de determina√ß√£o de dire√ß√£o (exemplo simples)
    if (lat > -26.977) return 'up';
    if (lat < -26.978) return 'down';
    if (lng < -48.751) return 'left';
    return 'right';
}

